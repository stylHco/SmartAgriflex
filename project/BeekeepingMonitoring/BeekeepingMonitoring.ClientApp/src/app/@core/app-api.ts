//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { LocalDate } from "@js-joda/core";

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const APP_API_BASE_URL = new InjectionToken<string>('APP_API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class SensorsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(APP_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:33395";
    }

    create(model: SensorCreateModel): Observable<number> {
        let url_ = this.baseUrl + "/_api/sensors";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    list(): Observable<SensorsListModel[]> {
        let url_ = this.baseUrl + "/_api/sensors";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorsListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorsListModel[]>;
        }));
    }

    protected processList(response: HttpResponseBase): Observable<SensorsListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SensorsListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    listForReference(): Observable<SensorReferenceModel[]> {
        let url_ = this.baseUrl + "/_api/sensors/for-reference";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListForReference(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListForReference(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorReferenceModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorReferenceModel[]>;
        }));
    }

    protected processListForReference(response: HttpResponseBase): Observable<SensorReferenceModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SensorReferenceModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<SensorDetailsModel> {
        let url_ = this.baseUrl + "/_api/sensors/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorDetailsModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorDetailsModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<SensorDetailsModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SensorDetailsModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(id: number, model: SensorUpdateModel): Observable<SensorUpdateModel> {
        let url_ = this.baseUrl + "/_api/sensors/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorUpdateModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorUpdateModel>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<SensorUpdateModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SensorUpdateModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/_api/sensors/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getForUpdate(id: number): Observable<SensorUpdateModel> {
        let url_ = this.baseUrl + "/_api/sensors/{id}/for-update";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorUpdateModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorUpdateModel>;
        }));
    }

    protected processGetForUpdate(response: HttpResponseBase): Observable<SensorUpdateModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SensorUpdateModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class SensorDevicesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(APP_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:33395";
    }

    create(model: SensorDeviceCreateModel): Observable<number> {
        let url_ = this.baseUrl + "/_api/sensor-devices";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    list(): Observable<SensorDevicesListModel[]> {
        let url_ = this.baseUrl + "/_api/sensor-devices";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorDevicesListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorDevicesListModel[]>;
        }));
    }

    protected processList(response: HttpResponseBase): Observable<SensorDevicesListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SensorDevicesListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    listForReference(): Observable<SensorDeviceReferenceModel[]> {
        let url_ = this.baseUrl + "/_api/sensor-devices/for-reference";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListForReference(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListForReference(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorDeviceReferenceModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorDeviceReferenceModel[]>;
        }));
    }

    protected processListForReference(response: HttpResponseBase): Observable<SensorDeviceReferenceModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SensorDeviceReferenceModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<SensorDeviceDetailsModel> {
        let url_ = this.baseUrl + "/_api/sensor-devices/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorDeviceDetailsModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorDeviceDetailsModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<SensorDeviceDetailsModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SensorDeviceDetailsModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(id: number, model: SensorDeviceUpdateModel): Observable<SensorDeviceUpdateModel> {
        let url_ = this.baseUrl + "/_api/sensor-devices/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorDeviceUpdateModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorDeviceUpdateModel>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<SensorDeviceUpdateModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SensorDeviceUpdateModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/_api/sensor-devices/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getForUpdate(id: number): Observable<SensorDeviceUpdateModel> {
        let url_ = this.baseUrl + "/_api/sensor-devices/{id}/for-update";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorDeviceUpdateModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorDeviceUpdateModel>;
        }));
    }

    protected processGetForUpdate(response: HttpResponseBase): Observable<SensorDeviceUpdateModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SensorDeviceUpdateModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class SensorDeviceDatasClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(APP_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:33395";
    }

    create(model: SensorDeviceDataCreateModel): Observable<number> {
        let url_ = this.baseUrl + "/_api/sensor-device-datas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    list(): Observable<SensorDeviceDatasListModel[]> {
        let url_ = this.baseUrl + "/_api/sensor-device-datas";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorDeviceDatasListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorDeviceDatasListModel[]>;
        }));
    }

    protected processList(response: HttpResponseBase): Observable<SensorDeviceDatasListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SensorDeviceDatasListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    listForReference(): Observable<SensorDeviceDataReferenceModel[]> {
        let url_ = this.baseUrl + "/_api/sensor-device-datas/for-reference";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListForReference(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListForReference(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorDeviceDataReferenceModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorDeviceDataReferenceModel[]>;
        }));
    }

    protected processListForReference(response: HttpResponseBase): Observable<SensorDeviceDataReferenceModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SensorDeviceDataReferenceModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<SensorDeviceDataDetailsModel> {
        let url_ = this.baseUrl + "/_api/sensor-device-datas/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorDeviceDataDetailsModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorDeviceDataDetailsModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<SensorDeviceDataDetailsModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SensorDeviceDataDetailsModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(id: number, model: SensorDeviceDataUpdateModel): Observable<SensorDeviceDataUpdateModel> {
        let url_ = this.baseUrl + "/_api/sensor-device-datas/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorDeviceDataUpdateModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorDeviceDataUpdateModel>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<SensorDeviceDataUpdateModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SensorDeviceDataUpdateModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/_api/sensor-device-datas/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getForUpdate(id: number): Observable<SensorDeviceDataUpdateModel> {
        let url_ = this.baseUrl + "/_api/sensor-device-datas/{id}/for-update";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorDeviceDataUpdateModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorDeviceDataUpdateModel>;
        }));
    }

    protected processGetForUpdate(response: HttpResponseBase): Observable<SensorDeviceDataUpdateModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SensorDeviceDataUpdateModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getForSensor(sensorIdStr: string, deviceIdStr: string): Observable<SensorsDataFullDetailsModel[]> {
        let url_ = this.baseUrl + "/_api/sensor-device-datas/get-for-sensor/{sensorIdStr}/{deviceIdStr}";
        if (sensorIdStr === undefined || sensorIdStr === null)
            throw new Error("The parameter 'sensorIdStr' must be defined.");
        url_ = url_.replace("{sensorIdStr}", encodeURIComponent("" + sensorIdStr));
        if (deviceIdStr === undefined || deviceIdStr === null)
            throw new Error("The parameter 'deviceIdStr' must be defined.");
        url_ = url_.replace("{deviceIdStr}", encodeURIComponent("" + deviceIdStr));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForSensor(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForSensor(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SensorsDataFullDetailsModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SensorsDataFullDetailsModel[]>;
        }));
    }

    protected processGetForSensor(response: HttpResponseBase): Observable<SensorsDataFullDetailsModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(SensorsDataFullDetailsModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSensor(sensorIdStr: string, deviceIdStr: string): Observable<{ [key: string]: SensorDateStatistics[]; }> {
        let url_ = this.baseUrl + "/_api/sensor-device-datas/get-sensor/{sensorIdStr}/{deviceIdStr}";
        if (sensorIdStr === undefined || sensorIdStr === null)
            throw new Error("The parameter 'sensorIdStr' must be defined.");
        url_ = url_.replace("{sensorIdStr}", encodeURIComponent("" + sensorIdStr));
        if (deviceIdStr === undefined || deviceIdStr === null)
            throw new Error("The parameter 'deviceIdStr' must be defined.");
        url_ = url_.replace("{deviceIdStr}", encodeURIComponent("" + deviceIdStr));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSensor(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSensor(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: SensorDateStatistics[]; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: SensorDateStatistics[]; }>;
        }));
    }

    protected processGetSensor(response: HttpResponseBase): Observable<{ [key: string]: SensorDateStatistics[]; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)![key] = resultData200[key] ? resultData200[key].map((i: any) => SensorDateStatistics.fromJS(i)) : [];
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AccountClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(APP_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:33395";
    }

    changePassword(model: ChangePasswordModel): Observable<IdentityResult> {
        let url_ = this.baseUrl + "/_api/account/change-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IdentityResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IdentityResult>;
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<IdentityResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IdentityResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class AuthClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(APP_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:33395";
    }

    getStatus(): Observable<AuthStatus> {
        let url_ = this.baseUrl + "/_api/auth/status";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStatus(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthStatus>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthStatus>;
        }));
    }

    protected processGetStatus(response: HttpResponseBase): Observable<AuthStatus> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthStatus.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    login(model: LoginModel): Observable<SignInResult> {
        let url_ = this.baseUrl + "/_api/auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<SignInResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<SignInResult>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<SignInResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SignInResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    logout(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/_api/auth/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processLogout(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    register(model: RegisterModel): Observable<IdentityResult> {
        let url_ = this.baseUrl + "/_api/auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IdentityResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IdentityResult>;
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<IdentityResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IdentityResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    resendEmailConfirmation(model: ResendEmailConfirmationModel): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/_api/auth/resend-email-confirmation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResendEmailConfirmation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResendEmailConfirmation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processResendEmailConfirmation(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    confirmEmail(model: ConfirmEmailModel): Observable<boolean> {
        let url_ = this.baseUrl + "/_api/auth/confirm-email";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processConfirmEmail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processConfirmEmail(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processConfirmEmail(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    requestPasswordReset(model: RequestPasswordResetModel): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/_api/auth/request-password-reset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRequestPasswordReset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRequestPasswordReset(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processRequestPasswordReset(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    completePasswordReset(model: CompletePasswordResetModel): Observable<IdentityResult> {
        let url_ = this.baseUrl + "/_api/auth/complete-password-reset";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCompletePasswordReset(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCompletePasswordReset(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<IdentityResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<IdentityResult>;
        }));
    }

    protected processCompletePasswordReset(response: HttpResponseBase): Observable<IdentityResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = IdentityResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class DevicesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(APP_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:33395";
    }

    create(model: DeviceCreateModel): Observable<number> {
        let url_ = this.baseUrl + "/_api/devices";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    list(): Observable<DevicesListModel[]> {
        let url_ = this.baseUrl + "/_api/devices";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DevicesListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DevicesListModel[]>;
        }));
    }

    protected processList(response: HttpResponseBase): Observable<DevicesListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DevicesListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    listForReference(): Observable<DeviceReferenceModel[]> {
        let url_ = this.baseUrl + "/_api/devices/for-reference";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListForReference(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListForReference(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeviceReferenceModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeviceReferenceModel[]>;
        }));
    }

    protected processListForReference(response: HttpResponseBase): Observable<DeviceReferenceModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DeviceReferenceModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<DeviceDetailsModel> {
        let url_ = this.baseUrl + "/_api/devices/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeviceDetailsModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeviceDetailsModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<DeviceDetailsModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceDetailsModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(id: number, model: DeviceUpdateModel): Observable<DeviceUpdateModel> {
        let url_ = this.baseUrl + "/_api/devices/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeviceUpdateModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeviceUpdateModel>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<DeviceUpdateModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceUpdateModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/_api/devices/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getForUpdate(id: number): Observable<DeviceUpdateModel> {
        let url_ = this.baseUrl + "/_api/devices/{id}/for-update";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DeviceUpdateModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DeviceUpdateModel>;
        }));
    }

    protected processGetForUpdate(response: HttpResponseBase): Observable<DeviceUpdateModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeviceUpdateModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    checkUniqueUid(currentId: number | null | undefined, uid: string): Observable<void> {
        let url_ = this.baseUrl + "/_api/devices/check-unique/uid?";
        if (currentId !== undefined && currentId !== null)
            url_ += "currentId=" + encodeURIComponent("" + currentId) + "&";
        if (uid === undefined || uid === null)
            throw new Error("The parameter 'uid' must be defined and cannot be null.");
        else
            url_ += "uid=" + encodeURIComponent("" + uid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCheckUniqueUid(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCheckUniqueUid(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processCheckUniqueUid(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class ConfigurableDashboardClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(APP_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:33395";
    }

    create(model: ConfigurableDashboardCreateModel): Observable<number> {
        let url_ = this.baseUrl + "/_api/configurable-dashboards";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    list(): Observable<ConfigurableDashboardListModel[]> {
        let url_ = this.baseUrl + "/_api/configurable-dashboards";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ConfigurableDashboardListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ConfigurableDashboardListModel[]>;
        }));
    }

    protected processList(response: HttpResponseBase): Observable<ConfigurableDashboardListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ConfigurableDashboardListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<ConfigurableDashboardDetailsModel> {
        let url_ = this.baseUrl + "/_api/configurable-dashboards/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ConfigurableDashboardDetailsModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ConfigurableDashboardDetailsModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<ConfigurableDashboardDetailsModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ConfigurableDashboardDetailsModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    updateDashboardTiles(id: number, newTiles: ConfigurableDashboardTileUpdateModel[]): Observable<{ [key: string]: number; }> {
        let url_ = this.baseUrl + "/_api/configurable-dashboards/{id}/tiles";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(newTiles);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateDashboardTiles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateDashboardTiles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<{ [key: string]: number; }>;
                }
            } else
                return _observableThrow(response_) as any as Observable<{ [key: string]: number; }>;
        }));
    }

    protected processUpdateDashboardTiles(response: HttpResponseBase): Observable<{ [key: string]: number; }> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)![key] = resultData200[key] !== undefined ? resultData200[key] : <any>null;
                }
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class DashboardChartsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(APP_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:33395";
    }

    getSalesVolumeByOutletType(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/_api/dashboard-charts/sales-volume-by-outlet-type";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSalesVolumeByOutletType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSalesVolumeByOutletType(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processGetSalesVolumeByOutletType(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSalesByPackTypeArea(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/_api/dashboard-charts/sales-by-pack-type-area";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSalesByPackTypeArea(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSalesByPackTypeArea(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processGetSalesByPackTypeArea(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSalesByYear(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/_api/dashboard-charts/sales-by-year";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSalesByYear(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSalesByYear(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processGetSalesByYear(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSalesByYearForBoxplot(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/_api/dashboard-charts/sales-by-year-for-boxplot";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSalesByYearForBoxplot(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSalesByYearForBoxplot(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processGetSalesByYearForBoxplot(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSalesByDate(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/_api/dashboard-charts/sales-by-date";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSalesByDate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSalesByDate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processGetSalesByDate(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getSalesByArea(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/_api/dashboard-charts/sales-by-district";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSalesByArea(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSalesByArea(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processGetSalesByArea(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getDummyTargetCompletion(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/_api/dashboard-charts/dummy-target-completion";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDummyTargetCompletion(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDummyTargetCompletion(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processGetDummyTargetCompletion(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getRulesSupportConfidence(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/_api/dashboard-charts/rules-support-confidence";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRulesSupportConfidence(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRulesSupportConfidence(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processGetRulesSupportConfidence(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getCalendarSalesHierarchical(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/_api/dashboard-charts/calendar-sales-hierarchical";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCalendarSalesHierarchical(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCalendarSalesHierarchical(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse | null>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse | null>;
        }));
    }

    protected processGetCalendarSalesHierarchical(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class DashboardTablesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(APP_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:33395";
    }

    associationRules(): Observable<DashboardTableAssociationRule[]> {
        let url_ = this.baseUrl + "/_api/dashboard-tables/association-rules";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAssociationRules(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAssociationRules(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<DashboardTableAssociationRule[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<DashboardTableAssociationRule[]>;
        }));
    }

    protected processAssociationRules(response: HttpResponseBase): Observable<DashboardTableAssociationRule[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DashboardTableAssociationRule.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class CustomRulesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(APP_API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:33395";
    }

    create(model: CustomRuleCreateModel): Observable<number> {
        let url_ = this.baseUrl + "/_api/custom-rules";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<number>;
                }
            } else
                return _observableThrow(response_) as any as Observable<number>;
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<number> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 201) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return _observableOf(result201);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    list(): Observable<CustomRulesListModel[]> {
        let url_ = this.baseUrl + "/_api/custom-rules";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CustomRulesListModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CustomRulesListModel[]>;
        }));
    }

    protected processList(response: HttpResponseBase): Observable<CustomRulesListModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CustomRulesListModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    listForReference(): Observable<CustomRuleReferenceModel[]> {
        let url_ = this.baseUrl + "/_api/custom-rules/for-reference";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListForReference(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListForReference(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CustomRuleReferenceModel[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CustomRuleReferenceModel[]>;
        }));
    }

    protected processListForReference(response: HttpResponseBase): Observable<CustomRuleReferenceModel[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CustomRuleReferenceModel.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    get(id: number): Observable<CustomRulesDetailsModel> {
        let url_ = this.baseUrl + "/_api/custom-rules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CustomRulesDetailsModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CustomRulesDetailsModel>;
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<CustomRulesDetailsModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomRulesDetailsModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    update(id: number, model: CustomRuleUpdateModel): Observable<CustomRuleUpdateModel> {
        let url_ = this.baseUrl + "/_api/custom-rules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CustomRuleUpdateModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CustomRuleUpdateModel>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<CustomRuleUpdateModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomRuleUpdateModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 400) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status === 409) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("A server side error occurred.", status, _responseText, _headers, result409);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/_api/custom-rules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getForUpdate(id: number): Observable<CustomRuleUpdateModel> {
        let url_ = this.baseUrl + "/_api/custom-rules/{id}/for-update";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetForUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetForUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CustomRuleUpdateModel>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CustomRuleUpdateModel>;
        }));
    }

    protected processGetForUpdate(response: HttpResponseBase): Observable<CustomRuleUpdateModel> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CustomRuleUpdateModel.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 404) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("A server side error occurred.", status, _responseText, _headers, result404);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ProblemDetails implements IProblemDetails {
    type!: string | null;
    title!: string | null;
    status!: number | null;
    detail!: string | null;
    instance!: string | null;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.title = _data["title"] !== undefined ? _data["title"] : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.detail = _data["detail"] !== undefined ? _data["detail"] : <any>null;
            this.instance = _data["instance"] !== undefined ? _data["instance"] : <any>null;
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["title"] = this.title !== undefined ? this.title : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["detail"] = this.detail !== undefined ? this.detail : <any>null;
        data["instance"] = this.instance !== undefined ? this.instance : <any>null;
        return data;
    }

    clone(): ProblemDetails {
        const json = this.toJSON();
        let result = new ProblemDetails();
        result.init(json);
        return result;
    }
}

export interface IProblemDetails {
    type: string | null;
    title: string | null;
    status: number | null;
    detail: string | null;
    instance: string | null;

    [key: string]: any;
}

export class SensorCreateModel implements ISensorCreateModel {
    name!: string;
    description!: string | null;

    constructor(data?: ISensorCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): SensorCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }

    clone(): SensorCreateModel {
        const json = this.toJSON();
        let result = new SensorCreateModel();
        result.init(json);
        return result;
    }
}

export interface ISensorCreateModel {
    name: string;
    description: string | null;
}

export class SensorsListModel implements ISensorsListModel {
    id!: number;
    name!: string;
    description!: string | null;

    constructor(data?: ISensorsListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): SensorsListModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorsListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }

    clone(): SensorsListModel {
        const json = this.toJSON();
        let result = new SensorsListModel();
        result.init(json);
        return result;
    }
}

export interface ISensorsListModel {
    id: number;
    name: string;
    description: string | null;
}

export class SensorReferenceModel implements ISensorReferenceModel {
    id!: number;
    name!: string;
    description!: string | null;

    constructor(data?: ISensorReferenceModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): SensorReferenceModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorReferenceModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }

    clone(): SensorReferenceModel {
        const json = this.toJSON();
        let result = new SensorReferenceModel();
        result.init(json);
        return result;
    }
}

export interface ISensorReferenceModel {
    id: number;
    name: string;
    description: string | null;
}

export class SensorDetailsModel implements ISensorDetailsModel {
    id!: number;
    name!: string;
    description!: string | null;

    constructor(data?: ISensorDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): SensorDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }

    clone(): SensorDetailsModel {
        const json = this.toJSON();
        let result = new SensorDetailsModel();
        result.init(json);
        return result;
    }
}

export interface ISensorDetailsModel {
    id: number;
    name: string;
    description: string | null;
}

export class SensorUpdateModel implements ISensorUpdateModel {
    name!: string;
    description!: string | null;

    constructor(data?: ISensorUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): SensorUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }

    clone(): SensorUpdateModel {
        const json = this.toJSON();
        let result = new SensorUpdateModel();
        result.init(json);
        return result;
    }
}

export interface ISensorUpdateModel {
    name: string;
    description: string | null;
}

export class SensorDeviceCreateModel implements ISensorDeviceCreateModel {
    sensorId!: number;
    deviceId!: number;
    comments!: string | null;

    constructor(data?: ISensorDeviceCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sensorId = _data["sensorId"] !== undefined ? _data["sensorId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
        }
    }

    static fromJS(data: any): SensorDeviceCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorDeviceCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sensorId"] = this.sensorId !== undefined ? this.sensorId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        return data;
    }

    clone(): SensorDeviceCreateModel {
        const json = this.toJSON();
        let result = new SensorDeviceCreateModel();
        result.init(json);
        return result;
    }
}

export interface ISensorDeviceCreateModel {
    sensorId: number;
    deviceId: number;
    comments: string | null;
}

export class SensorDevicesListModel implements ISensorDevicesListModel {
    id!: number;
    sensor!: SensorReferenceModel;
    device!: DeviceReferenceModel;
    comments!: string | null;

    constructor(data?: ISensorDevicesListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sensor = new SensorReferenceModel();
            this.device = new DeviceReferenceModel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sensor = _data["sensor"] ? SensorReferenceModel.fromJS(_data["sensor"]) : new SensorReferenceModel();
            this.device = _data["device"] ? DeviceReferenceModel.fromJS(_data["device"]) : new DeviceReferenceModel();
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
        }
    }

    static fromJS(data: any): SensorDevicesListModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorDevicesListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sensor"] = this.sensor ? this.sensor.toJSON() : <any>null;
        data["device"] = this.device ? this.device.toJSON() : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        return data;
    }

    clone(): SensorDevicesListModel {
        const json = this.toJSON();
        let result = new SensorDevicesListModel();
        result.init(json);
        return result;
    }
}

export interface ISensorDevicesListModel {
    id: number;
    sensor: SensorReferenceModel;
    device: DeviceReferenceModel;
    comments: string | null;
}

export class DeviceReferenceModel implements IDeviceReferenceModel {
    id!: number;
    name!: string;
    nickname!: string | null;

    constructor(data?: IDeviceReferenceModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.nickname = _data["nickname"] !== undefined ? _data["nickname"] : <any>null;
        }
    }

    static fromJS(data: any): DeviceReferenceModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceReferenceModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["nickname"] = this.nickname !== undefined ? this.nickname : <any>null;
        return data;
    }

    clone(): DeviceReferenceModel {
        const json = this.toJSON();
        let result = new DeviceReferenceModel();
        result.init(json);
        return result;
    }
}

export interface IDeviceReferenceModel {
    id: number;
    name: string;
    nickname: string | null;
}

export class SensorDeviceReferenceModel implements ISensorDeviceReferenceModel {
    id!: number;
    sensor!: SensorReferenceModel;
    device!: DeviceReferenceModel;

    constructor(data?: ISensorDeviceReferenceModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sensor = new SensorReferenceModel();
            this.device = new DeviceReferenceModel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sensor = _data["sensor"] ? SensorReferenceModel.fromJS(_data["sensor"]) : new SensorReferenceModel();
            this.device = _data["device"] ? DeviceReferenceModel.fromJS(_data["device"]) : new DeviceReferenceModel();
        }
    }

    static fromJS(data: any): SensorDeviceReferenceModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorDeviceReferenceModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sensor"] = this.sensor ? this.sensor.toJSON() : <any>null;
        data["device"] = this.device ? this.device.toJSON() : <any>null;
        return data;
    }

    clone(): SensorDeviceReferenceModel {
        const json = this.toJSON();
        let result = new SensorDeviceReferenceModel();
        result.init(json);
        return result;
    }
}

export interface ISensorDeviceReferenceModel {
    id: number;
    sensor: SensorReferenceModel;
    device: DeviceReferenceModel;
}

export class SensorDeviceDetailsModel implements ISensorDeviceDetailsModel {
    id!: number;
    sensor!: SensorReferenceModel;
    device!: DeviceReferenceModel;
    comments!: string | null;

    constructor(data?: ISensorDeviceDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sensor = new SensorReferenceModel();
            this.device = new DeviceReferenceModel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sensor = _data["sensor"] ? SensorReferenceModel.fromJS(_data["sensor"]) : new SensorReferenceModel();
            this.device = _data["device"] ? DeviceReferenceModel.fromJS(_data["device"]) : new DeviceReferenceModel();
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
        }
    }

    static fromJS(data: any): SensorDeviceDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorDeviceDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sensor"] = this.sensor ? this.sensor.toJSON() : <any>null;
        data["device"] = this.device ? this.device.toJSON() : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        return data;
    }

    clone(): SensorDeviceDetailsModel {
        const json = this.toJSON();
        let result = new SensorDeviceDetailsModel();
        result.init(json);
        return result;
    }
}

export interface ISensorDeviceDetailsModel {
    id: number;
    sensor: SensorReferenceModel;
    device: DeviceReferenceModel;
    comments: string | null;
}

export class SensorDeviceUpdateModel implements ISensorDeviceUpdateModel {
    sensorId!: number;
    deviceId!: number;
    comments!: string | null;

    constructor(data?: ISensorDeviceUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sensorId = _data["sensorId"] !== undefined ? _data["sensorId"] : <any>null;
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
        }
    }

    static fromJS(data: any): SensorDeviceUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorDeviceUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sensorId"] = this.sensorId !== undefined ? this.sensorId : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        return data;
    }

    clone(): SensorDeviceUpdateModel {
        const json = this.toJSON();
        let result = new SensorDeviceUpdateModel();
        result.init(json);
        return result;
    }
}

export interface ISensorDeviceUpdateModel {
    sensorId: number;
    deviceId: number;
    comments: string | null;
}

export class SensorDeviceDataCreateModel implements ISensorDeviceDataCreateModel {
    sensorDeviceId!: number;
    value!: number | null;
    recordDate!: Date;

    constructor(data?: ISensorDeviceDataCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sensorDeviceId = _data["sensorDeviceId"] !== undefined ? _data["sensorDeviceId"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.recordDate = _data["recordDate"] ? new Date(_data["recordDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): SensorDeviceDataCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorDeviceDataCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sensorDeviceId"] = this.sensorDeviceId !== undefined ? this.sensorDeviceId : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>null;
        return data;
    }

    clone(): SensorDeviceDataCreateModel {
        const json = this.toJSON();
        let result = new SensorDeviceDataCreateModel();
        result.init(json);
        return result;
    }
}

export interface ISensorDeviceDataCreateModel {
    sensorDeviceId: number;
    value: number | null;
    recordDate: Date;
}

export class SensorDeviceDatasListModel implements ISensorDeviceDatasListModel {
    id!: number;
    sensorDevice!: SensorDeviceReferenceModel;
    value!: number | null;
    recordDate!: Date;

    constructor(data?: ISensorDeviceDatasListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sensorDevice = new SensorDeviceReferenceModel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sensorDevice = _data["sensorDevice"] ? SensorDeviceReferenceModel.fromJS(_data["sensorDevice"]) : new SensorDeviceReferenceModel();
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.recordDate = _data["recordDate"] ? new Date(_data["recordDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): SensorDeviceDatasListModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorDeviceDatasListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sensorDevice"] = this.sensorDevice ? this.sensorDevice.toJSON() : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>null;
        return data;
    }

    clone(): SensorDeviceDatasListModel {
        const json = this.toJSON();
        let result = new SensorDeviceDatasListModel();
        result.init(json);
        return result;
    }
}

export interface ISensorDeviceDatasListModel {
    id: number;
    sensorDevice: SensorDeviceReferenceModel;
    value: number | null;
    recordDate: Date;
}

export class SensorDeviceDataReferenceModel implements ISensorDeviceDataReferenceModel {
    id!: number;
    sensorDevice!: SensorDeviceReferenceModel;
    value!: number | null;
    recordDate!: Date;

    constructor(data?: ISensorDeviceDataReferenceModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sensorDevice = new SensorDeviceReferenceModel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sensorDevice = _data["sensorDevice"] ? SensorDeviceReferenceModel.fromJS(_data["sensorDevice"]) : new SensorDeviceReferenceModel();
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.recordDate = _data["recordDate"] ? new Date(_data["recordDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): SensorDeviceDataReferenceModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorDeviceDataReferenceModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sensorDevice"] = this.sensorDevice ? this.sensorDevice.toJSON() : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>null;
        return data;
    }

    clone(): SensorDeviceDataReferenceModel {
        const json = this.toJSON();
        let result = new SensorDeviceDataReferenceModel();
        result.init(json);
        return result;
    }
}

export interface ISensorDeviceDataReferenceModel {
    id: number;
    sensorDevice: SensorDeviceReferenceModel;
    value: number | null;
    recordDate: Date;
}

export class SensorDeviceDataDetailsModel implements ISensorDeviceDataDetailsModel {
    id!: number;
    sensorDevice!: SensorDeviceReferenceModel;
    value!: number | null;
    recordDate!: Date;

    constructor(data?: ISensorDeviceDataDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sensorDevice = new SensorDeviceReferenceModel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sensorDevice = _data["sensorDevice"] ? SensorDeviceReferenceModel.fromJS(_data["sensorDevice"]) : new SensorDeviceReferenceModel();
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.recordDate = _data["recordDate"] ? new Date(_data["recordDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): SensorDeviceDataDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorDeviceDataDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sensorDevice"] = this.sensorDevice ? this.sensorDevice.toJSON() : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>null;
        return data;
    }

    clone(): SensorDeviceDataDetailsModel {
        const json = this.toJSON();
        let result = new SensorDeviceDataDetailsModel();
        result.init(json);
        return result;
    }
}

export interface ISensorDeviceDataDetailsModel {
    id: number;
    sensorDevice: SensorDeviceReferenceModel;
    value: number | null;
    recordDate: Date;
}

export class SensorDeviceDataUpdateModel implements ISensorDeviceDataUpdateModel {
    sensorDeviceId!: number;
    value!: number | null;
    recordDate!: Date;

    constructor(data?: ISensorDeviceDataUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sensorDeviceId = _data["sensorDeviceId"] !== undefined ? _data["sensorDeviceId"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.recordDate = _data["recordDate"] ? new Date(_data["recordDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): SensorDeviceDataUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorDeviceDataUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sensorDeviceId"] = this.sensorDeviceId !== undefined ? this.sensorDeviceId : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>null;
        return data;
    }

    clone(): SensorDeviceDataUpdateModel {
        const json = this.toJSON();
        let result = new SensorDeviceDataUpdateModel();
        result.init(json);
        return result;
    }
}

export interface ISensorDeviceDataUpdateModel {
    sensorDeviceId: number;
    value: number | null;
    recordDate: Date;
}

export class SensorsDataFullDetailsModel implements ISensorsDataFullDetailsModel {
    id!: number;
    sensorDevice!: SensorDevice;
    sensorDeviceId!: number;
    value!: number | null;
    recordDate!: Date;
    statistics!: SensorsDataStatistics | null;

    constructor(data?: ISensorsDataFullDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sensorDevice = new SensorDevice();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sensorDevice = _data["sensorDevice"] ? SensorDevice.fromJS(_data["sensorDevice"]) : new SensorDevice();
            this.sensorDeviceId = _data["sensorDeviceId"] !== undefined ? _data["sensorDeviceId"] : <any>null;
            this.value = _data["value"] !== undefined ? _data["value"] : <any>null;
            this.recordDate = _data["recordDate"] ? new Date(_data["recordDate"].toString()) : <any>null;
            this.statistics = _data["statistics"] ? SensorsDataStatistics.fromJS(_data["statistics"]) : <any>null;
        }
    }

    static fromJS(data: any): SensorsDataFullDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new SensorsDataFullDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sensorDevice"] = this.sensorDevice ? this.sensorDevice.toJSON() : <any>null;
        data["sensorDeviceId"] = this.sensorDeviceId !== undefined ? this.sensorDeviceId : <any>null;
        data["value"] = this.value !== undefined ? this.value : <any>null;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>null;
        data["statistics"] = this.statistics ? this.statistics.toJSON() : <any>null;
        return data;
    }

    clone(): SensorsDataFullDetailsModel {
        const json = this.toJSON();
        let result = new SensorsDataFullDetailsModel();
        result.init(json);
        return result;
    }
}

export interface ISensorsDataFullDetailsModel {
    id: number;
    sensorDevice: SensorDevice;
    sensorDeviceId: number;
    value: number | null;
    recordDate: Date;
    statistics: SensorsDataStatistics | null;
}

export class SensorDevice implements ISensorDevice {
    id!: number;
    sensor!: Sensor;
    sensorId!: number;
    device!: Device;
    deviceId!: number;
    comments!: string | null;

    constructor(data?: ISensorDevice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sensor = new Sensor();
            this.device = new Device();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sensor = _data["sensor"] ? Sensor.fromJS(_data["sensor"]) : new Sensor();
            this.sensorId = _data["sensorId"] !== undefined ? _data["sensorId"] : <any>null;
            this.device = _data["device"] ? Device.fromJS(_data["device"]) : new Device();
            this.deviceId = _data["deviceId"] !== undefined ? _data["deviceId"] : <any>null;
            this.comments = _data["comments"] !== undefined ? _data["comments"] : <any>null;
        }
    }

    static fromJS(data: any): SensorDevice {
        data = typeof data === 'object' ? data : {};
        let result = new SensorDevice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sensor"] = this.sensor ? this.sensor.toJSON() : <any>null;
        data["sensorId"] = this.sensorId !== undefined ? this.sensorId : <any>null;
        data["device"] = this.device ? this.device.toJSON() : <any>null;
        data["deviceId"] = this.deviceId !== undefined ? this.deviceId : <any>null;
        data["comments"] = this.comments !== undefined ? this.comments : <any>null;
        return data;
    }

    clone(): SensorDevice {
        const json = this.toJSON();
        let result = new SensorDevice();
        result.init(json);
        return result;
    }
}

export interface ISensorDevice {
    id: number;
    sensor: Sensor;
    sensorId: number;
    device: Device;
    deviceId: number;
    comments: string | null;
}

export class Sensor implements ISensor {
    id!: number;
    name!: string;
    description!: string | null;

    constructor(data?: ISensor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): Sensor {
        data = typeof data === 'object' ? data : {};
        let result = new Sensor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }

    clone(): Sensor {
        const json = this.toJSON();
        let result = new Sensor();
        result.init(json);
        return result;
    }
}

export interface ISensor {
    id: number;
    name: string;
    description: string | null;
}

export class Device implements IDevice {
    id!: number;
    name!: string;
    nickname!: string | null;
    description!: string | null;
    model!: string | null;
    latitude!: number | null;
    longitude!: number | null;
    installedDate!: Date | null;
    uid!: string | null;

    constructor(data?: IDevice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.nickname = _data["nickname"] !== undefined ? _data["nickname"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.model = _data["model"] !== undefined ? _data["model"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.installedDate = _data["installedDate"] ? new Date(_data["installedDate"].toString()) : <any>null;
            this.uid = _data["uid"] !== undefined ? _data["uid"] : <any>null;
        }
    }

    static fromJS(data: any): Device {
        data = typeof data === 'object' ? data : {};
        let result = new Device();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["nickname"] = this.nickname !== undefined ? this.nickname : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["model"] = this.model !== undefined ? this.model : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["installedDate"] = this.installedDate ? this.installedDate.toISOString() : <any>null;
        data["uid"] = this.uid !== undefined ? this.uid : <any>null;
        return data;
    }

    clone(): Device {
        const json = this.toJSON();
        let result = new Device();
        result.init(json);
        return result;
    }
}

export interface IDevice {
    id: number;
    name: string;
    nickname: string | null;
    description: string | null;
    model: string | null;
    latitude: number | null;
    longitude: number | null;
    installedDate: Date | null;
    uid: string | null;
}

export class SensorsDataStatistics implements ISensorsDataStatistics {
    minValue!: number;
    maxValue!: number;
    averageValue!: number;
    sum!: number;

    constructor(data?: ISensorsDataStatistics) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.minValue = _data["minValue"] !== undefined ? _data["minValue"] : <any>null;
            this.maxValue = _data["maxValue"] !== undefined ? _data["maxValue"] : <any>null;
            this.averageValue = _data["averageValue"] !== undefined ? _data["averageValue"] : <any>null;
            this.sum = _data["sum"] !== undefined ? _data["sum"] : <any>null;
        }
    }

    static fromJS(data: any): SensorsDataStatistics {
        data = typeof data === 'object' ? data : {};
        let result = new SensorsDataStatistics();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minValue"] = this.minValue !== undefined ? this.minValue : <any>null;
        data["maxValue"] = this.maxValue !== undefined ? this.maxValue : <any>null;
        data["averageValue"] = this.averageValue !== undefined ? this.averageValue : <any>null;
        data["sum"] = this.sum !== undefined ? this.sum : <any>null;
        return data;
    }

    clone(): SensorsDataStatistics {
        const json = this.toJSON();
        let result = new SensorsDataStatistics();
        result.init(json);
        return result;
    }
}

export interface ISensorsDataStatistics {
    minValue: number;
    maxValue: number;
    averageValue: number;
    sum: number;
}

export class SensorDateStatistics implements ISensorDateStatistics {
    recordedDate!: Date;
    sum!: number;
    max!: number;
    min!: number;
    avg!: number;

    constructor(data?: ISensorDateStatistics) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.recordedDate = _data["recordedDate"] ? new Date(_data["recordedDate"].toString()) : <any>null;
            this.sum = _data["sum"] !== undefined ? _data["sum"] : <any>null;
            this.max = _data["max"] !== undefined ? _data["max"] : <any>null;
            this.min = _data["min"] !== undefined ? _data["min"] : <any>null;
            this.avg = _data["avg"] !== undefined ? _data["avg"] : <any>null;
        }
    }

    static fromJS(data: any): SensorDateStatistics {
        data = typeof data === 'object' ? data : {};
        let result = new SensorDateStatistics();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recordedDate"] = this.recordedDate ? this.recordedDate.toISOString() : <any>null;
        data["sum"] = this.sum !== undefined ? this.sum : <any>null;
        data["max"] = this.max !== undefined ? this.max : <any>null;
        data["min"] = this.min !== undefined ? this.min : <any>null;
        data["avg"] = this.avg !== undefined ? this.avg : <any>null;
        return data;
    }

    clone(): SensorDateStatistics {
        const json = this.toJSON();
        let result = new SensorDateStatistics();
        result.init(json);
        return result;
    }
}

export interface ISensorDateStatistics {
    recordedDate: Date;
    sum: number;
    max: number;
    min: number;
    avg: number;
}

export class IdentityResult implements IIdentityResult {
    succeeded!: boolean;
    errors!: IdentityError[];
    success!: IdentityResult;

    constructor(data?: IIdentityResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.errors = [];
            this.success = new IdentityResult();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"] !== undefined ? _data["succeeded"] : <any>null;
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(IdentityError.fromJS(item));
            }
            else {
                this.errors = <any>null;
            }
            this.success = _data["success"] ? IdentityResult.fromJS(_data["success"]) : new IdentityResult();
        }
    }

    static fromJS(data: any): IdentityResult {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded !== undefined ? this.succeeded : <any>null;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        data["success"] = this.success ? this.success.toJSON() : <any>null;
        return data;
    }

    clone(): IdentityResult {
        const json = this.toJSON();
        let result = new IdentityResult();
        result.init(json);
        return result;
    }
}

export interface IIdentityResult {
    succeeded: boolean;
    errors: IdentityError[];
    success: IdentityResult;
}

export class IdentityError implements IIdentityError {
    code!: string;
    description!: string;

    constructor(data?: IIdentityError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"] !== undefined ? _data["code"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
        }
    }

    static fromJS(data: any): IdentityError {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        return data;
    }

    clone(): IdentityError {
        const json = this.toJSON();
        let result = new IdentityError();
        result.init(json);
        return result;
    }
}

export interface IIdentityError {
    code: string;
    description: string;
}

export class ChangePasswordModel implements IChangePasswordModel {
    currentPassword!: string;
    newPassword!: string;

    constructor(data?: IChangePasswordModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.currentPassword = _data["currentPassword"] !== undefined ? _data["currentPassword"] : <any>null;
            this.newPassword = _data["newPassword"] !== undefined ? _data["newPassword"] : <any>null;
        }
    }

    static fromJS(data: any): ChangePasswordModel {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["currentPassword"] = this.currentPassword !== undefined ? this.currentPassword : <any>null;
        data["newPassword"] = this.newPassword !== undefined ? this.newPassword : <any>null;
        return data;
    }

    clone(): ChangePasswordModel {
        const json = this.toJSON();
        let result = new ChangePasswordModel();
        result.init(json);
        return result;
    }
}

export interface IChangePasswordModel {
    currentPassword: string;
    newPassword: string;
}

export class AuthStatus implements IAuthStatus {
    isLoggedIn!: boolean;
    user!: AuthenticatedUserInfo | null;

    constructor(data?: IAuthStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isLoggedIn = _data["isLoggedIn"] !== undefined ? _data["isLoggedIn"] : <any>null;
            this.user = _data["user"] ? AuthenticatedUserInfo.fromJS(_data["user"]) : <any>null;
        }
    }

    static fromJS(data: any): AuthStatus {
        data = typeof data === 'object' ? data : {};
        let result = new AuthStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isLoggedIn"] = this.isLoggedIn !== undefined ? this.isLoggedIn : <any>null;
        data["user"] = this.user ? this.user.toJSON() : <any>null;
        return data;
    }

    clone(): AuthStatus {
        const json = this.toJSON();
        let result = new AuthStatus();
        result.init(json);
        return result;
    }
}

export interface IAuthStatus {
    isLoggedIn: boolean;
    user: AuthenticatedUserInfo | null;
}

export class AuthenticatedUserInfo implements IAuthenticatedUserInfo {
    email!: string;

    constructor(data?: IAuthenticatedUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
        }
    }

    static fromJS(data: any): AuthenticatedUserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticatedUserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        return data;
    }

    clone(): AuthenticatedUserInfo {
        const json = this.toJSON();
        let result = new AuthenticatedUserInfo();
        result.init(json);
        return result;
    }
}

export interface IAuthenticatedUserInfo {
    email: string;
}

export class SignInResult implements ISignInResult {
    succeeded!: boolean;
    isLockedOut!: boolean;
    isNotAllowed!: boolean;
    requiresTwoFactor!: boolean;
    success!: SignInResult;
    failed!: SignInResult;
    lockedOut!: SignInResult;
    notAllowed!: SignInResult;
    twoFactorRequired!: SignInResult;

    constructor(data?: ISignInResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.success = new SignInResult();
            this.failed = new SignInResult();
            this.lockedOut = new SignInResult();
            this.notAllowed = new SignInResult();
            this.twoFactorRequired = new SignInResult();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.succeeded = _data["succeeded"] !== undefined ? _data["succeeded"] : <any>null;
            this.isLockedOut = _data["isLockedOut"] !== undefined ? _data["isLockedOut"] : <any>null;
            this.isNotAllowed = _data["isNotAllowed"] !== undefined ? _data["isNotAllowed"] : <any>null;
            this.requiresTwoFactor = _data["requiresTwoFactor"] !== undefined ? _data["requiresTwoFactor"] : <any>null;
            this.success = _data["success"] ? SignInResult.fromJS(_data["success"]) : new SignInResult();
            this.failed = _data["failed"] ? SignInResult.fromJS(_data["failed"]) : new SignInResult();
            this.lockedOut = _data["lockedOut"] ? SignInResult.fromJS(_data["lockedOut"]) : new SignInResult();
            this.notAllowed = _data["notAllowed"] ? SignInResult.fromJS(_data["notAllowed"]) : new SignInResult();
            this.twoFactorRequired = _data["twoFactorRequired"] ? SignInResult.fromJS(_data["twoFactorRequired"]) : new SignInResult();
        }
    }

    static fromJS(data: any): SignInResult {
        data = typeof data === 'object' ? data : {};
        let result = new SignInResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["succeeded"] = this.succeeded !== undefined ? this.succeeded : <any>null;
        data["isLockedOut"] = this.isLockedOut !== undefined ? this.isLockedOut : <any>null;
        data["isNotAllowed"] = this.isNotAllowed !== undefined ? this.isNotAllowed : <any>null;
        data["requiresTwoFactor"] = this.requiresTwoFactor !== undefined ? this.requiresTwoFactor : <any>null;
        data["success"] = this.success ? this.success.toJSON() : <any>null;
        data["failed"] = this.failed ? this.failed.toJSON() : <any>null;
        data["lockedOut"] = this.lockedOut ? this.lockedOut.toJSON() : <any>null;
        data["notAllowed"] = this.notAllowed ? this.notAllowed.toJSON() : <any>null;
        data["twoFactorRequired"] = this.twoFactorRequired ? this.twoFactorRequired.toJSON() : <any>null;
        return data;
    }

    clone(): SignInResult {
        const json = this.toJSON();
        let result = new SignInResult();
        result.init(json);
        return result;
    }
}

export interface ISignInResult {
    succeeded: boolean;
    isLockedOut: boolean;
    isNotAllowed: boolean;
    requiresTwoFactor: boolean;
    success: SignInResult;
    failed: SignInResult;
    lockedOut: SignInResult;
    notAllowed: SignInResult;
    twoFactorRequired: SignInResult;
}

export class LoginModel implements ILoginModel {
    username!: string;
    password!: string;
    rememberMe!: boolean;

    constructor(data?: ILoginModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.rememberMe = _data["rememberMe"] !== undefined ? _data["rememberMe"] : <any>null;
        }
    }

    static fromJS(data: any): LoginModel {
        data = typeof data === 'object' ? data : {};
        let result = new LoginModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["rememberMe"] = this.rememberMe !== undefined ? this.rememberMe : <any>null;
        return data;
    }

    clone(): LoginModel {
        const json = this.toJSON();
        let result = new LoginModel();
        result.init(json);
        return result;
    }
}

export interface ILoginModel {
    username: string;
    password: string;
    rememberMe: boolean;
}

export class RegisterModel implements IRegisterModel {
    email!: string;
    password!: string;

    constructor(data?: IRegisterModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any): RegisterModel {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data;
    }

    clone(): RegisterModel {
        const json = this.toJSON();
        let result = new RegisterModel();
        result.init(json);
        return result;
    }
}

export interface IRegisterModel {
    email: string;
    password: string;
}

export class ResendEmailConfirmationModel implements IResendEmailConfirmationModel {
    email!: string;

    constructor(data?: IResendEmailConfirmationModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
        }
    }

    static fromJS(data: any): ResendEmailConfirmationModel {
        data = typeof data === 'object' ? data : {};
        let result = new ResendEmailConfirmationModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        return data;
    }

    clone(): ResendEmailConfirmationModel {
        const json = this.toJSON();
        let result = new ResendEmailConfirmationModel();
        result.init(json);
        return result;
    }
}

export interface IResendEmailConfirmationModel {
    email: string;
}

export class ConfirmEmailModel implements IConfirmEmailModel {
    email!: string;
    code!: string;

    constructor(data?: IConfirmEmailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.code = _data["code"] !== undefined ? _data["code"] : <any>null;
        }
    }

    static fromJS(data: any): ConfirmEmailModel {
        data = typeof data === 'object' ? data : {};
        let result = new ConfirmEmailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        return data;
    }

    clone(): ConfirmEmailModel {
        const json = this.toJSON();
        let result = new ConfirmEmailModel();
        result.init(json);
        return result;
    }
}

export interface IConfirmEmailModel {
    email: string;
    code: string;
}

export class RequestPasswordResetModel implements IRequestPasswordResetModel {
    email!: string;

    constructor(data?: IRequestPasswordResetModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
        }
    }

    static fromJS(data: any): RequestPasswordResetModel {
        data = typeof data === 'object' ? data : {};
        let result = new RequestPasswordResetModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        return data;
    }

    clone(): RequestPasswordResetModel {
        const json = this.toJSON();
        let result = new RequestPasswordResetModel();
        result.init(json);
        return result;
    }
}

export interface IRequestPasswordResetModel {
    email: string;
}

export class CompletePasswordResetModel implements ICompletePasswordResetModel {
    email!: string;
    code!: string;
    password!: string;

    constructor(data?: ICompletePasswordResetModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.code = _data["code"] !== undefined ? _data["code"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any): CompletePasswordResetModel {
        data = typeof data === 'object' ? data : {};
        let result = new CompletePasswordResetModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["code"] = this.code !== undefined ? this.code : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data;
    }

    clone(): CompletePasswordResetModel {
        const json = this.toJSON();
        let result = new CompletePasswordResetModel();
        result.init(json);
        return result;
    }
}

export interface ICompletePasswordResetModel {
    email: string;
    code: string;
    password: string;
}

export class DeviceCreateModel implements IDeviceCreateModel {
    name!: string;
    nickname!: string | null;
    description!: string | null;
    model!: string | null;
    latitude!: number | null;
    longitude!: number | null;
    installedDate!: Date | null;
    uid!: string | null;

    constructor(data?: IDeviceCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.nickname = _data["nickname"] !== undefined ? _data["nickname"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.model = _data["model"] !== undefined ? _data["model"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.installedDate = _data["installedDate"] ? new Date(_data["installedDate"].toString()) : <any>null;
            this.uid = _data["uid"] !== undefined ? _data["uid"] : <any>null;
        }
    }

    static fromJS(data: any): DeviceCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["nickname"] = this.nickname !== undefined ? this.nickname : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["model"] = this.model !== undefined ? this.model : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["installedDate"] = this.installedDate ? this.installedDate.toISOString() : <any>null;
        data["uid"] = this.uid !== undefined ? this.uid : <any>null;
        return data;
    }

    clone(): DeviceCreateModel {
        const json = this.toJSON();
        let result = new DeviceCreateModel();
        result.init(json);
        return result;
    }
}

export interface IDeviceCreateModel {
    name: string;
    nickname: string | null;
    description: string | null;
    model: string | null;
    latitude: number | null;
    longitude: number | null;
    installedDate: Date | null;
    uid: string | null;
}

export class DevicesListModel implements IDevicesListModel {
    id!: number;
    name!: string;
    nickname!: string | null;
    description!: string | null;
    model!: string | null;
    latitude!: number | null;
    longitude!: number | null;
    installedDate!: Date | null;
    uid!: string | null;

    constructor(data?: IDevicesListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.nickname = _data["nickname"] !== undefined ? _data["nickname"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.model = _data["model"] !== undefined ? _data["model"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.installedDate = _data["installedDate"] ? new Date(_data["installedDate"].toString()) : <any>null;
            this.uid = _data["uid"] !== undefined ? _data["uid"] : <any>null;
        }
    }

    static fromJS(data: any): DevicesListModel {
        data = typeof data === 'object' ? data : {};
        let result = new DevicesListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["nickname"] = this.nickname !== undefined ? this.nickname : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["model"] = this.model !== undefined ? this.model : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["installedDate"] = this.installedDate ? this.installedDate.toISOString() : <any>null;
        data["uid"] = this.uid !== undefined ? this.uid : <any>null;
        return data;
    }

    clone(): DevicesListModel {
        const json = this.toJSON();
        let result = new DevicesListModel();
        result.init(json);
        return result;
    }
}

export interface IDevicesListModel {
    id: number;
    name: string;
    nickname: string | null;
    description: string | null;
    model: string | null;
    latitude: number | null;
    longitude: number | null;
    installedDate: Date | null;
    uid: string | null;
}

export class DeviceDetailsModel implements IDeviceDetailsModel {
    id!: number;
    name!: string;
    nickname!: string | null;
    description!: string | null;
    model!: string | null;
    latitude!: number | null;
    longitude!: number | null;
    installedDate!: Date | null;
    uid!: string | null;

    constructor(data?: IDeviceDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.nickname = _data["nickname"] !== undefined ? _data["nickname"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.model = _data["model"] !== undefined ? _data["model"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.installedDate = _data["installedDate"] ? new Date(_data["installedDate"].toString()) : <any>null;
            this.uid = _data["uid"] !== undefined ? _data["uid"] : <any>null;
        }
    }

    static fromJS(data: any): DeviceDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["nickname"] = this.nickname !== undefined ? this.nickname : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["model"] = this.model !== undefined ? this.model : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["installedDate"] = this.installedDate ? this.installedDate.toISOString() : <any>null;
        data["uid"] = this.uid !== undefined ? this.uid : <any>null;
        return data;
    }

    clone(): DeviceDetailsModel {
        const json = this.toJSON();
        let result = new DeviceDetailsModel();
        result.init(json);
        return result;
    }
}

export interface IDeviceDetailsModel {
    id: number;
    name: string;
    nickname: string | null;
    description: string | null;
    model: string | null;
    latitude: number | null;
    longitude: number | null;
    installedDate: Date | null;
    uid: string | null;
}

export class DeviceUpdateModel implements IDeviceUpdateModel {
    name!: string;
    nickname!: string | null;
    description!: string | null;
    model!: string | null;
    latitude!: number | null;
    longitude!: number | null;
    installedDate!: Date | null;
    uid!: string | null;

    constructor(data?: IDeviceUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.nickname = _data["nickname"] !== undefined ? _data["nickname"] : <any>null;
            this.description = _data["description"] !== undefined ? _data["description"] : <any>null;
            this.model = _data["model"] !== undefined ? _data["model"] : <any>null;
            this.latitude = _data["latitude"] !== undefined ? _data["latitude"] : <any>null;
            this.longitude = _data["longitude"] !== undefined ? _data["longitude"] : <any>null;
            this.installedDate = _data["installedDate"] ? new Date(_data["installedDate"].toString()) : <any>null;
            this.uid = _data["uid"] !== undefined ? _data["uid"] : <any>null;
        }
    }

    static fromJS(data: any): DeviceUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["nickname"] = this.nickname !== undefined ? this.nickname : <any>null;
        data["description"] = this.description !== undefined ? this.description : <any>null;
        data["model"] = this.model !== undefined ? this.model : <any>null;
        data["latitude"] = this.latitude !== undefined ? this.latitude : <any>null;
        data["longitude"] = this.longitude !== undefined ? this.longitude : <any>null;
        data["installedDate"] = this.installedDate ? this.installedDate.toISOString() : <any>null;
        data["uid"] = this.uid !== undefined ? this.uid : <any>null;
        return data;
    }

    clone(): DeviceUpdateModel {
        const json = this.toJSON();
        let result = new DeviceUpdateModel();
        result.init(json);
        return result;
    }
}

export interface IDeviceUpdateModel {
    name: string;
    nickname: string | null;
    description: string | null;
    model: string | null;
    latitude: number | null;
    longitude: number | null;
    installedDate: Date | null;
    uid: string | null;
}

export class ConfigurableDashboardCreateModel implements IConfigurableDashboardCreateModel {
    name!: string;

    constructor(data?: IConfigurableDashboardCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): ConfigurableDashboardCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigurableDashboardCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }

    clone(): ConfigurableDashboardCreateModel {
        const json = this.toJSON();
        let result = new ConfigurableDashboardCreateModel();
        result.init(json);
        return result;
    }
}

export interface IConfigurableDashboardCreateModel {
    name: string;
}

export class ConfigurableDashboardListModel implements IConfigurableDashboardListModel {
    id!: number;
    name!: string;

    constructor(data?: IConfigurableDashboardListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
        }
    }

    static fromJS(data: any): ConfigurableDashboardListModel {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigurableDashboardListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data;
    }

    clone(): ConfigurableDashboardListModel {
        const json = this.toJSON();
        let result = new ConfigurableDashboardListModel();
        result.init(json);
        return result;
    }
}

export interface IConfigurableDashboardListModel {
    id: number;
    name: string;
}

export class ConfigurableDashboardDetailsModel implements IConfigurableDashboardDetailsModel {
    id!: number;
    name!: string;
    tiles!: ConfigurableDashboardTileModel[];

    constructor(data?: IConfigurableDashboardDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.tiles = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            if (Array.isArray(_data["tiles"])) {
                this.tiles = [] as any;
                for (let item of _data["tiles"])
                    this.tiles!.push(ConfigurableDashboardTileModel.fromJS(item));
            }
            else {
                this.tiles = <any>null;
            }
        }
    }

    static fromJS(data: any): ConfigurableDashboardDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigurableDashboardDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        if (Array.isArray(this.tiles)) {
            data["tiles"] = [];
            for (let item of this.tiles)
                data["tiles"].push(item.toJSON());
        }
        return data;
    }

    clone(): ConfigurableDashboardDetailsModel {
        const json = this.toJSON();
        let result = new ConfigurableDashboardDetailsModel();
        result.init(json);
        return result;
    }
}

export interface IConfigurableDashboardDetailsModel {
    id: number;
    name: string;
    tiles: ConfigurableDashboardTileModel[];
}

export class ConfigurableDashboardTileModel implements IConfigurableDashboardTileModel {
    id!: number;
    x!: number;
    y!: number;
    width!: number;
    height!: number;
    type!: ConfDashboardTileType;
    predefinedVisualizationOptions!: PredefinedVisualizationTileOptions | null;

    constructor(data?: IConfigurableDashboardTileModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.x = _data["x"] !== undefined ? _data["x"] : <any>null;
            this.y = _data["y"] !== undefined ? _data["y"] : <any>null;
            this.width = _data["width"] !== undefined ? _data["width"] : <any>null;
            this.height = _data["height"] !== undefined ? _data["height"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.predefinedVisualizationOptions = _data["predefinedVisualizationOptions"] ? PredefinedVisualizationTileOptions.fromJS(_data["predefinedVisualizationOptions"]) : <any>null;
        }
    }

    static fromJS(data: any): ConfigurableDashboardTileModel {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigurableDashboardTileModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["x"] = this.x !== undefined ? this.x : <any>null;
        data["y"] = this.y !== undefined ? this.y : <any>null;
        data["width"] = this.width !== undefined ? this.width : <any>null;
        data["height"] = this.height !== undefined ? this.height : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["predefinedVisualizationOptions"] = this.predefinedVisualizationOptions ? this.predefinedVisualizationOptions.toJSON() : <any>null;
        return data;
    }

    clone(): ConfigurableDashboardTileModel {
        const json = this.toJSON();
        let result = new ConfigurableDashboardTileModel();
        result.init(json);
        return result;
    }
}

export interface IConfigurableDashboardTileModel {
    id: number;
    x: number;
    y: number;
    width: number;
    height: number;
    type: ConfDashboardTileType;
    predefinedVisualizationOptions: PredefinedVisualizationTileOptions | null;
}

export enum ConfDashboardTileType {
    DummyText = "DummyText",
    PredefinedVisualization = "PredefinedVisualization",
}

export class PredefinedVisualizationTileOptions implements IPredefinedVisualizationTileOptions {
    type!: PredefinedVisualizationType;

    constructor(data?: IPredefinedVisualizationTileOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
        }
    }

    static fromJS(data: any): PredefinedVisualizationTileOptions {
        data = typeof data === 'object' ? data : {};
        let result = new PredefinedVisualizationTileOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type !== undefined ? this.type : <any>null;
        return data;
    }

    clone(): PredefinedVisualizationTileOptions {
        const json = this.toJSON();
        let result = new PredefinedVisualizationTileOptions();
        result.init(json);
        return result;
    }
}

export interface IPredefinedVisualizationTileOptions {
    type: PredefinedVisualizationType;
}

export enum PredefinedVisualizationType {
    BasicPie = "BasicPie",
    BasicDonut = "BasicDonut",
    BasicBar = "BasicBar",
    HorizontalBar = "HorizontalBar",
    BasicHeatMap = "BasicHeatMap",
    SemiPie = "SemiPie",
    BasicRadar = "BasicRadar",
    BasicLine = "BasicLine",
    DualLine = "DualLine",
    NestedDonut = "NestedDonut",
    MultiBar = "MultiBar",
    LayeredBar = "LayeredBar",
    BasicBoxplot = "BasicBoxplot",
    BasicTimeLine = "BasicTimeLine",
    BasicCyprusMap = "BasicCyprusMap",
    BasicBullet = "BasicBullet",
    BasicPareto = "BasicPareto",
    StackedBar = "StackedBar",
    ComboLineBar = "ComboLineBar",
    ComboLineBarRotated = "ComboLineBarRotated",
    HorizontalBoxplot = "HorizontalBoxplot",
    ComboLineBox = "ComboLineBox",
    BasicSunburstChart = "BasicSunburstChart",
    BasicTreeMap = "BasicTreeMap",
    BasicPartitionChart = "BasicPartitionChart",
    RulesSupportConfidence = "RulesSupportConfidence",
    RulesSupportConfidenceLift = "RulesSupportConfidenceLift",
    RulesMatrix = "RulesMatrix",
    AssociationRules = "AssociationRules",
}

export class ConfigurableDashboardTileUpdateModel implements IConfigurableDashboardTileUpdateModel {
    id!: number | null;
    tempId!: string | null;
    x!: number;
    y!: number;
    width!: number;
    height!: number;
    type!: ConfDashboardTileType;
    predefinedVisualizationOptions!: PredefinedVisualizationTileOptions | null;

    constructor(data?: IConfigurableDashboardTileUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.tempId = _data["tempId"] !== undefined ? _data["tempId"] : <any>null;
            this.x = _data["x"] !== undefined ? _data["x"] : <any>null;
            this.y = _data["y"] !== undefined ? _data["y"] : <any>null;
            this.width = _data["width"] !== undefined ? _data["width"] : <any>null;
            this.height = _data["height"] !== undefined ? _data["height"] : <any>null;
            this.type = _data["type"] !== undefined ? _data["type"] : <any>null;
            this.predefinedVisualizationOptions = _data["predefinedVisualizationOptions"] ? PredefinedVisualizationTileOptions.fromJS(_data["predefinedVisualizationOptions"]) : <any>null;
        }
    }

    static fromJS(data: any): ConfigurableDashboardTileUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigurableDashboardTileUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["tempId"] = this.tempId !== undefined ? this.tempId : <any>null;
        data["x"] = this.x !== undefined ? this.x : <any>null;
        data["y"] = this.y !== undefined ? this.y : <any>null;
        data["width"] = this.width !== undefined ? this.width : <any>null;
        data["height"] = this.height !== undefined ? this.height : <any>null;
        data["type"] = this.type !== undefined ? this.type : <any>null;
        data["predefinedVisualizationOptions"] = this.predefinedVisualizationOptions ? this.predefinedVisualizationOptions.toJSON() : <any>null;
        return data;
    }

    clone(): ConfigurableDashboardTileUpdateModel {
        const json = this.toJSON();
        let result = new ConfigurableDashboardTileUpdateModel();
        result.init(json);
        return result;
    }
}

export interface IConfigurableDashboardTileUpdateModel {
    id: number | null;
    tempId: string | null;
    x: number;
    y: number;
    width: number;
    height: number;
    type: ConfDashboardTileType;
    predefinedVisualizationOptions: PredefinedVisualizationTileOptions | null;
}

export class DashboardTableAssociationRule implements IDashboardTableAssociationRule {
    rule!: string;
    confidence!: number;
    support!: number;
    lift!: number;

    constructor(data?: IDashboardTableAssociationRule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rule = _data["rule"] !== undefined ? _data["rule"] : <any>null;
            this.confidence = _data["confidence"] !== undefined ? _data["confidence"] : <any>null;
            this.support = _data["support"] !== undefined ? _data["support"] : <any>null;
            this.lift = _data["lift"] !== undefined ? _data["lift"] : <any>null;
        }
    }

    static fromJS(data: any): DashboardTableAssociationRule {
        data = typeof data === 'object' ? data : {};
        let result = new DashboardTableAssociationRule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rule"] = this.rule !== undefined ? this.rule : <any>null;
        data["confidence"] = this.confidence !== undefined ? this.confidence : <any>null;
        data["support"] = this.support !== undefined ? this.support : <any>null;
        data["lift"] = this.lift !== undefined ? this.lift : <any>null;
        return data;
    }

    clone(): DashboardTableAssociationRule {
        const json = this.toJSON();
        let result = new DashboardTableAssociationRule();
        result.init(json);
        return result;
    }
}

export interface IDashboardTableAssociationRule {
    rule: string;
    confidence: number;
    support: number;
    lift: number;
}

export class CustomRuleCreateModel implements ICustomRuleCreateModel {
    sensorId!: number;
    min!: number | null;
    max!: number | null;
    programDirective!: string | null;
    ruleText!: string | null;

    constructor(data?: ICustomRuleCreateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sensorId = _data["sensorId"] !== undefined ? _data["sensorId"] : <any>null;
            this.min = _data["min"] !== undefined ? _data["min"] : <any>null;
            this.max = _data["max"] !== undefined ? _data["max"] : <any>null;
            this.programDirective = _data["programDirective"] !== undefined ? _data["programDirective"] : <any>null;
            this.ruleText = _data["ruleText"] !== undefined ? _data["ruleText"] : <any>null;
        }
    }

    static fromJS(data: any): CustomRuleCreateModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomRuleCreateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sensorId"] = this.sensorId !== undefined ? this.sensorId : <any>null;
        data["min"] = this.min !== undefined ? this.min : <any>null;
        data["max"] = this.max !== undefined ? this.max : <any>null;
        data["programDirective"] = this.programDirective !== undefined ? this.programDirective : <any>null;
        data["ruleText"] = this.ruleText !== undefined ? this.ruleText : <any>null;
        return data;
    }

    clone(): CustomRuleCreateModel {
        const json = this.toJSON();
        let result = new CustomRuleCreateModel();
        result.init(json);
        return result;
    }
}

export interface ICustomRuleCreateModel {
    sensorId: number;
    min: number | null;
    max: number | null;
    programDirective: string | null;
    ruleText: string | null;
}

export class CustomRulesListModel implements ICustomRulesListModel {
    id!: number;
    sensor!: SensorReferenceModel;
    min!: number | null;
    max!: number | null;
    programDirective!: string | null;
    ruleText!: string | null;

    constructor(data?: ICustomRulesListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sensor = new SensorReferenceModel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sensor = _data["sensor"] ? SensorReferenceModel.fromJS(_data["sensor"]) : new SensorReferenceModel();
            this.min = _data["min"] !== undefined ? _data["min"] : <any>null;
            this.max = _data["max"] !== undefined ? _data["max"] : <any>null;
            this.programDirective = _data["programDirective"] !== undefined ? _data["programDirective"] : <any>null;
            this.ruleText = _data["ruleText"] !== undefined ? _data["ruleText"] : <any>null;
        }
    }

    static fromJS(data: any): CustomRulesListModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomRulesListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sensor"] = this.sensor ? this.sensor.toJSON() : <any>null;
        data["min"] = this.min !== undefined ? this.min : <any>null;
        data["max"] = this.max !== undefined ? this.max : <any>null;
        data["programDirective"] = this.programDirective !== undefined ? this.programDirective : <any>null;
        data["ruleText"] = this.ruleText !== undefined ? this.ruleText : <any>null;
        return data;
    }

    clone(): CustomRulesListModel {
        const json = this.toJSON();
        let result = new CustomRulesListModel();
        result.init(json);
        return result;
    }
}

export interface ICustomRulesListModel {
    id: number;
    sensor: SensorReferenceModel;
    min: number | null;
    max: number | null;
    programDirective: string | null;
    ruleText: string | null;
}

export class CustomRuleReferenceModel implements ICustomRuleReferenceModel {
    id!: number;
    sensor!: SensorReferenceModel;
    programDirective!: string | null;
    ruleText!: string | null;

    constructor(data?: ICustomRuleReferenceModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sensor = new SensorReferenceModel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sensor = _data["sensor"] ? SensorReferenceModel.fromJS(_data["sensor"]) : new SensorReferenceModel();
            this.programDirective = _data["programDirective"] !== undefined ? _data["programDirective"] : <any>null;
            this.ruleText = _data["ruleText"] !== undefined ? _data["ruleText"] : <any>null;
        }
    }

    static fromJS(data: any): CustomRuleReferenceModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomRuleReferenceModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sensor"] = this.sensor ? this.sensor.toJSON() : <any>null;
        data["programDirective"] = this.programDirective !== undefined ? this.programDirective : <any>null;
        data["ruleText"] = this.ruleText !== undefined ? this.ruleText : <any>null;
        return data;
    }

    clone(): CustomRuleReferenceModel {
        const json = this.toJSON();
        let result = new CustomRuleReferenceModel();
        result.init(json);
        return result;
    }
}

export interface ICustomRuleReferenceModel {
    id: number;
    sensor: SensorReferenceModel;
    programDirective: string | null;
    ruleText: string | null;
}

export class CustomRulesDetailsModel implements ICustomRulesDetailsModel {
    id!: number;
    sensor!: SensorReferenceModel;
    min!: number | null;
    max!: number | null;
    programDirective!: string | null;
    ruleText!: string | null;

    constructor(data?: ICustomRulesDetailsModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.sensor = new SensorReferenceModel();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.sensor = _data["sensor"] ? SensorReferenceModel.fromJS(_data["sensor"]) : new SensorReferenceModel();
            this.min = _data["min"] !== undefined ? _data["min"] : <any>null;
            this.max = _data["max"] !== undefined ? _data["max"] : <any>null;
            this.programDirective = _data["programDirective"] !== undefined ? _data["programDirective"] : <any>null;
            this.ruleText = _data["ruleText"] !== undefined ? _data["ruleText"] : <any>null;
        }
    }

    static fromJS(data: any): CustomRulesDetailsModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomRulesDetailsModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["sensor"] = this.sensor ? this.sensor.toJSON() : <any>null;
        data["min"] = this.min !== undefined ? this.min : <any>null;
        data["max"] = this.max !== undefined ? this.max : <any>null;
        data["programDirective"] = this.programDirective !== undefined ? this.programDirective : <any>null;
        data["ruleText"] = this.ruleText !== undefined ? this.ruleText : <any>null;
        return data;
    }

    clone(): CustomRulesDetailsModel {
        const json = this.toJSON();
        let result = new CustomRulesDetailsModel();
        result.init(json);
        return result;
    }
}

export interface ICustomRulesDetailsModel {
    id: number;
    sensor: SensorReferenceModel;
    min: number | null;
    max: number | null;
    programDirective: string | null;
    ruleText: string | null;
}

export class CustomRuleUpdateModel implements ICustomRuleUpdateModel {
    sensorId!: number;
    min!: number | null;
    max!: number | null;
    programDirective!: string | null;
    ruleText!: string | null;

    constructor(data?: ICustomRuleUpdateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sensorId = _data["sensorId"] !== undefined ? _data["sensorId"] : <any>null;
            this.min = _data["min"] !== undefined ? _data["min"] : <any>null;
            this.max = _data["max"] !== undefined ? _data["max"] : <any>null;
            this.programDirective = _data["programDirective"] !== undefined ? _data["programDirective"] : <any>null;
            this.ruleText = _data["ruleText"] !== undefined ? _data["ruleText"] : <any>null;
        }
    }

    static fromJS(data: any): CustomRuleUpdateModel {
        data = typeof data === 'object' ? data : {};
        let result = new CustomRuleUpdateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sensorId"] = this.sensorId !== undefined ? this.sensorId : <any>null;
        data["min"] = this.min !== undefined ? this.min : <any>null;
        data["max"] = this.max !== undefined ? this.max : <any>null;
        data["programDirective"] = this.programDirective !== undefined ? this.programDirective : <any>null;
        data["ruleText"] = this.ruleText !== undefined ? this.ruleText : <any>null;
        return data;
    }

    clone(): CustomRuleUpdateModel {
        const json = this.toJSON();
        let result = new CustomRuleUpdateModel();
        result.init(json);
        return result;
    }
}

export interface ICustomRuleUpdateModel {
    sensorId: number;
    min: number | null;
    max: number | null;
    programDirective: string | null;
    ruleText: string | null;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new ApiException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}